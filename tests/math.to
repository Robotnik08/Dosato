// This is a test of the MATH functions

MAKE ARRAY INT testList = [
    1234,
    324324,
    234234,
    23422,
    234234,
    324523454,
    123123,
    1,
    -1,
    0,
    123123,
    -69420,
    -1234
];


DO SAYLN ("Max between 1 and 3 is: " + MAX(1, 3));
DO SAYLN ("Max between 1 and -3 is: " + MAX(1, -3));

DO SAY ('\n');

DO SAYLN ("Min between 1 and 3 is: " + MIN(1, 3));
DO SAYLN ("Min between 1 and -3 is: " + MIN(1, -3));

DO SAY ('\n');

DO SAYLN ("List: ", testList);
DO SAYLN ("Max in list is: " + MAX(testList));
DO SAYLN ("Min in list is: " + MIN(testList));

DO SAY ('\n');

DO SAYLN ("The <| operator also works: " + 1 <| 3);
DO SAYLN ("The <| operator also works: " + 1 <| -3);

DO SAY ('\n');

DO SAYLN ("The |> operator also works: " + 1 |> 3);
DO SAYLN ("The |> operator also works: " + 1 |> -3);

DO SAY ('\n');

DO SAYLN ("The absolute value of -1 is: " + ABS(-1));
DO SAYLN ("The absolute value of 1 is: " + ABS(1));
DO SAYLN ("The absolute value of 0 is: " + ABS(0));
DO SAYLN ("The absolute value of -1.2 is: " + ABS(-1.2));

DO SAY ('\n');

DO SAYLN ("The !- operator also works: " + !- -1);
DO SAYLN ("The !- operator also works: " + !- 1);
DO SAYLN ("The !- operator also works: " + !- 0);
DO SAYLN ("The !- operator also works: " + !- -1.2);

DO SAY ('\n');

DO SAYLN ("The rounded value of 1.2 is: " + ROUND(1.2));
DO SAYLN ("The rounded value of 1.5 is: " + ROUND(1.5));
DO SAYLN ("The rounded value of 1.6 is: " + ROUND(1.6));
DO SAYLN ("The rounded value of -1.2 is: " + ROUND(-1.2));

DO SAY ('\n');

DO SAYLN ("The floor value of 1.2 is: " + FLOOR(1.2));
DO SAYLN ("The floor value of 1.5 is: " + FLOOR(1.5));
DO SAYLN ("The floor value of 1.6 is: " + FLOOR(1.6));
DO SAYLN ("The floor value of -1.2 is: " + FLOOR(-1.2));

DO SAY ('\n');

DO SAYLN ("The ceiling value of 1.2 is: " + CEIL(1.2));
DO SAYLN ("The ceiling value of 1.5 is: " + CEIL(1.5));
DO SAYLN ("The ceiling value of 1.6 is: " + CEIL(1.6));
DO SAYLN ("The ceiling value of -1.2 is: " + CEIL(-1.2));

DO SAY ('\n');

DO SAYLN ("The square root of 1 is: " + SQRT(1));
DO SAYLN ("The square root of 4 is: " + SQRT(4));
DO SAYLN ("The square root of 9 is: " + SQRT(9));
DO SAYLN ("The square root of 40 is: " + SQRT(40));

DO SAY ('\n');

DO SAYLN ("The ^/ operator also works: " + ^/1);
DO SAYLN ("The ^/ operator also works: " + ^/4);
DO SAYLN ("The ^/ operator also works: " + ^/9);
DO SAYLN ("The ^/ operator also works: " + ^/40);

DO SAY ('\n');

DO SAYLN ("Using the ^/ operator, you can also get any type of root: 3 ^/ 9 = " + 3 ^/ 9);

DO SAY ('\n');

DO SAYLN ("The power of 1 to 1 is: " + POW(1, 1));
DO SAYLN ("The power of 2 to 2 is: " + POW(2, 2));
DO SAYLN ("The power of 10 to 2 is: " + POW(10, 2));
DO SAYLN ("The power of 2 to 10 is: " + POW(2, 10));

DO SAY ('\n');

DO SAYLN ("The ** operator also works: " + 1 ** 1);
DO SAYLN ("The ** operator also works: " + 2 ** 2);
DO SAYLN ("The ** operator also works: " + 10 ** 2);
DO SAYLN ("The ** operator also works: " + 2 ** 10);

DO SAY ('\n');

DO SAYLN ("The log of 1 is: " + LOG(1));
DO SAYLN ("The log of 2 is: " + LOG(2));
DO SAYLN ("The log of 10 is: " + LOG(10));
DO SAYLN ("The log of 100 is: " + LOG(100));

DO SAY ('\n');

DO SAYLN ("The log10 of 1 is: " + LOG10(1));
DO SAYLN ("The log10 of 2 is: " + LOG10(2));
DO SAYLN ("The log10 of 10 is: " + LOG10(10));
DO SAYLN ("The log10 of 100 is: " + LOG10(100));

DO SAY ('\n');

DO SAYLN ("The EXP of 1 is: " + EXP(1));
DO SAYLN ("The EXP of 2 is: " + EXP(2));
DO SAYLN ("The EXP of 10 is: " + EXP(10));
DO SAYLN ("The EXP of 100 is: " + EXP(100));

DO SAY ('\n');

DO SAYLN ("The sine of 0 is: " + SIN(0));
DO SAYLN ("The sine of 1 is: " + SIN(1));
DO SAYLN ("The sine of 2 is: " + SIN(2));
DO SAYLN ("The sine of PI is: " + SIN(MATH_PI));

DO SAY ('\n');

DO SAYLN ("The cosine of 0 is: " + COS(0));
DO SAYLN ("The cosine of 1 is: " + COS(1));
DO SAYLN ("The cosine of 2 is: " + COS(2));
DO SAYLN ("The cosine of PI is: " + COS(MATH_PI));

DO SAY ('\n');

DO SAYLN ("The tangent of 0 is: " + TAN(0));
DO SAYLN ("The tangent of 1 is: " + TAN(1));
DO SAYLN ("The tangent of 2 is: " + TAN(2));
DO SAYLN ("The tangent of PI is: " + TAN(MATH_PI));

DO SAY ('\n');

DO SAYLN ("The arcsine of 0 is: " + ASIN(0));
DO SAYLN ("The arcsine of 1 is: " + ASIN(1));
DO SAYLN ("The arcsine of 2 is: " + ASIN(0.5));
DO SAYLN ("The arcsine of PI is: " + ASIN(0.2));

DO SAY ('\n');

DO SAYLN ("The arccosine of 0 is: " + ACOS(0));
DO SAYLN ("The arccosine of 1 is: " + ACOS(1));
DO SAYLN ("The arccosine of 2 is: " + ACOS(0.5));
DO SAYLN ("The arccosine of PI is: " + ACOS(0.2));

DO SAY ('\n');

DO SAYLN ("The arctangent of 0 is: " + ATAN(0));
DO SAYLN ("The arctangent of 1 is: " + ATAN(1));
DO SAYLN ("The arctangent of 2 is: " + ATAN(0.5));
DO SAYLN ("The arctangent of PI is: " + ATAN(0.2));

DO SAY ('\n');