// game of life in Dosato
MAKE INT size = 10;
MAKE ARRAY ARRAY BOOL board = FILL(FILL(FALSE, size),size);

MAKE FUNC VOID displayBoard () {
    MAKE STRING out = "";
    DO {
        DO {
            DO IF (board#i#j) THEN {SET out += "#";} ELSE {SET out += ".";};
        } FOR (RANGE(size) => j);
        SET out += "\n";
    } FOR (RANGE(size) => i);
    DO CLEAR ();
    DO SAY (out);
};

MAKE FUNC BOOL getFromPos (INT i, INT j) {
    DO RETURN (board#i#j) WHEN (i >= 0 && i < size && j >= 0 && j < size) ELSE RETURN (FALSE);
};

// main game of life function
MAKE FUNC BOOL getIfAlive (INT i, INT j) {
    MAKE INT neighbors = 
    getFromPos (i - 1, j - 1) +
    getFromPos (i - 1, j    ) +
    getFromPos (i - 1, j + 1) +
    getFromPos (i,     j - 1) +
    getFromPos (i,     j + 1) +
    getFromPos (i + 1, j - 1) +
    getFromPos (i + 1, j    ) +
    getFromPos (i + 1, j + 1);
    
    DO RETURN (neighbors > 1 && neighbors < 4)
    WHEN (getFromPos(i, j)) ELSE RETURN (neighbors == 3);
};

// glider
DO {
    SET board#0#2 = TRUE;
    SET board#1#0 = TRUE;
    SET board#1#2 = TRUE;
    SET board#2#1 = TRUE;
    SET board#2#2 = TRUE;
};

DO displayBoard();

MAKE INT maxSteps = 27;
DO {
    // edit board
    MAKE ARRAY ARRAY BOOL newBoard = board;
    DO {
        DO {
            SET newBoard#i#j = getIfAlive (i, j);
        } FOR (RANGE(size) => j);
    } FOR (RANGE(size) => i);
    SET board = newBoard;
    DO displayBoard();
} FOR (RANGE(maxSteps) => s);